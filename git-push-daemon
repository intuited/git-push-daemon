#!/bin/bash
# Automated daemon designed for crontab-triggered pushing of git repos.
# Run with any argument to get compiled help information
# @requires in path: sed, git

function gpd_help_returncodes {
  echo "\
  0:    	the push was successful
  1-3,6:	indicate infrastructure issues
  4:    	shouldn't happen
  5:    	indicates timeout since last successful push.
  Non-zero return codes are accompanied by information and a state dump on stderr." | sed 's/^  //'
}

function gpd_help_env {
  echo "\
  GPD_REPO_DIR       	!    	the path to the repo to be pushed
  GPD_LOG_DIR        	!    	the directory to which events will be logged.
  GPD_REPO_REMOTE    	=NONE	the remote repository which the push should target, ie the <repository> argument to \$(git push).
  GPD_LASTWIN_TIMEOUT	=0   	if this number exceeds the number of seconds since the last successful push, an error state will be returned." | sed 's/^  //'
}

function gpd_dump_state {
  echo "GPD_REPO_DIR=${GPD_REPO_DIR:+\"$GPD_REPO_DIR\"}"
  echo "GPD_LOG_DIR=${GPD_LOG_DIR:+\"$GPD_LOG_DIR\"}"
  echo "GPD_REPO_REMOTE=${GPD_REPO_REMOTE:+\"$GPD_REPO_REMOTE\"}"
  echo "GPD_LASTWIN_TIMEOUT=${GPD_LASTWIN_TIMEOUT:+\"$GPD_LASTWIN_TIMEOUT\"}"
}

# push and report result via error codes
function gpd_push {
  # @requires GPD_REPO_DIR
  [[ $GPD_REPO_DIR ]] || { echo "gpd_push requires that GPD_REPO_DIR be set" >&2; echo "state:" >&2; gpd_dump_state >&2; return 1; }
  cd "$GPD_REPO_DIR" || { echo "gpd_push failed to cd to repo dir \"$GPD_REPO_DIR\"" >&2; gpd_dump_state >&2; return 3; }
  git push ${GPD_REPO_REMOTE:+\"$GPD_REPO_REMOTE\"} || { return 4; }
}

function gpd_help_logging {
  echo "\
  All push failures are logged to \$GPD_LOG_DIR/push-fails
  Push failures which occur within the timeout period do not result in an error state and are logged to \$GPD_LOG_DIR/timely-push-fails
  All such event loggings consist of a timestamp and newline being added to the respective file.
  In the event of a successful push, the file \$GPD_LOG_DIR/lastwin is replaced with the timestamp." | sed 's/^  //'
}

# push and log the result appropriately
function gpd_act {
  # @calls gpd_push
  # @requires GPD_LOG_DIR
  # @uses GPD_LASTWIN_TIMEOUT = 0
  GPD_LASTWIN_TIMEOUT=${GPD_LASTWIN_TIMEOUT:=0}
  [[ $GPD_LOG_DIR ]] || { echo "gpd_act requires that GPD_LOG_DIR be set" >&2; gpd_dump_state >&2; return 2; }
  [ -d $GPD_LOG_DIR ]  || { echo "gpd_act requires that GPD_LOG_DIR be an existent directory" >&2; gpd_dump_state >&2; return 6; }
  gpd_push;
  ret=$?;
  now=$(date +%s);
  if (( $ret == 4 )); then
    lastwin=$(cat "$GPD_LOG_DIR/lastwin" 2>/dev/null || echo 0);
    if (( $now - $lastwin > $GPD_LASTWIN_TIMEOUT )); then
      echo "gpd_act: git push failed; timeout exceeded: last successful push was at $(date -d "1970-01-01 $date sec")." >&2;
      gpd_dump_state >&2;
      return 5;
    else
      echo $now >>"$GPD_LOG_DIR/timely-push-fails"
    fi;
    echo $now >>"$GPD_LOG_DIR/push-fails"
  elif (( $ret )); then
    return $ret;
  else
    echo "$now" > "$GPD_LOG_DIR/lastwin"
  fi;
}

function gpd_help_options {
  echo "\
  -f FILE	sources the profile stored in FILE.
         	This should contain assignments to git-push-daemon's environment variables in shell script format." | sed 's/^  //'
}

function gpd_help {
  echo "usage: git-push-daemon [OPTIONS]"
  echo "Options:"
  gpd_help_options | sed 's/^/  /'
  echo "Uses these environment variables:"
  gpd_help_env | sed 's/^/  /'
  echo "Produces these return codes:"
  gpd_help_returncodes | sed 's/^/  /'
  echo "Logging details:"
  gpd_help_logging | sed 's/^/  /'
}

function gpd_route {
  if [[ $1 == -f ]]; then
    shift;
    profile="$1";
    shift;
  fi;
  [[ $1 ]] && { gpd_help; return $?; }
  if [[ $profile ]]; then source "$profile"; fi;
  gpd_act;
}

gpd_route "$@"
